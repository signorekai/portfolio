---
import Eyes from "@components/Eyes.astro";
import Header from "@components/Header.astro";
import Viewport from "@components/Viewport.astro";
import "../styles/base.css";

interface Props {
  title: string;
}

const { title = "" } = Astro.props;
---

<!doctype html>
<html lang="en" class="overscroll-none">
  <head>
    <meta charset="UTF-8" />
    <meta name="description" content="Astro description" />
    <meta
      name="viewport"
      content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no"
    />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="theme-color" content="#000" />
    <meta name="generator" content={Astro.generator} />
    <link rel="stylesheet" href="https://use.typekit.net/cvj8baw.css" />
    <title>{title}</title>
  </head>
  <body>
    <div
      class="fixed z-9999 transition-opacity duration-250 -translate-x-40 -translate-y-40 opacity-0 pointer-events-none"
      x-bind="cursor"
      x-data="Cursor"
    >
      <Eyes
        watchMobileCanvasMove={false}
        watchEmptyCanvas={true}
        reverse={true}
        className="-translate-x-1/2 -translate-y-1/2 hidden lg:block lg:!w-20 lg:!h-20 text-peach-light"
      />
    </div>
    <Viewport />
    <Header />
    <div
      class="body-wrapper"
      x-data="BodyWrapper"
      x-bind="body"
      x-ref="bodyWrapper"
    >
      <slot />
    </div>
  </body>
</html>

<style>
  .body-wrapper {
    @apply flex-1 overflow-auto overscroll-none overflow-x-hidden;
    scrollbar-width: none;
  }
</style>

<script>
  import type { CursorChangeEventEffects } from "@components/Canvas.astro";
  import Alpine from "alpinejs";

  if (window.visualViewport) {
    window.visualViewport.addEventListener("resize", () => {
      const height = window.visualViewport?.height || 0;
      document.documentElement.style.setProperty("--dvh", `${height / 100}px`);
    });
  }
  document.addEventListener("alpine:init", () => {
    Alpine.data("BodyWrapper", () => ({
      scrollPosition: 0,
      showOverflow: true,
      body: {
        ["@resize.window"]() {},
        ["@hide-overflow.camel.window.passive"]() {
          this.$data.scrollPosition = this.$refs.bodyWrapper?.scrollTop || 0;
          this.$data.showOverflow = false;
        },
        ["@show-overflow.camel.window"]() {
          this.$data.showOverflow = true;
          setTimeout(() => {
            this.$refs.bodyWrapper?.scrollTo(0, this.$data.scrollPosition);
          }, 1);
        },
        [":class"]() {
          return {
            "lock-scroll": this.$data.showOverflow === false,
          };
        },
        [":style"]() {
          return {
            "--offset": `-${this.$data.scrollPosition}px`,
          };
        },
      },
    }));

    Alpine.data("Cursor", () => ({
      initialised: true,
      init() {
        this.$el.classList.remove("opacity-0");
        setTimeout(() => {
          this.$el.classList.remove("duration-250", "transition-opacity");
          this.$el.classList.add("duration-0", "transition-transform");
        }, 300);
      },
      cursorPosition: {
        x: document.documentElement.clientWidth / 2 || 0,
        y: document.documentElement.clientHeight / 2 || 0,
      },
      throttledListener: null,
      cursor: {
        ["@mousemove.window.throttle.16ms.passive"](e: MouseEvent) {
          if (this.initialised) {
            this.$data.cursorPosition.x = e.clientX;
            this.$data.cursorPosition.y = e.clientY;
          }
        },
        ["@cursor-change.camel.window"]({
          detail,
        }: CustomEvent<CursorChangeEventEffects>) {
          if (this.initialised) {
            if (detail.hasOwnProperty("className")) {
              if (detail.className.hasOwnProperty("toggle")) {
                detail.className.toggle.every((className) => {
                  this.$el.classList.toggle(className);
                  return true;
                });
              }
              if (detail.className.hasOwnProperty("add")) {
                this.$el.classList.add(...detail.className.add);
              }
              if (detail.className.hasOwnProperty("remove")) {
                this.$el.classList.remove(...detail.className.remove);
              }
            }
          }
        },
        [":style"]() {
          return {
            "--tw-translate-x": `${this.$data.cursorPosition.x}px`,
            "--tw-translate-y": `${this.$data.cursorPosition.y}px`,
          };
        },
      },
    }));
  });
</script>
