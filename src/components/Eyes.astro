---
interface Props {
  className?: string;
  reverse?: boolean;
  watchEmptyCanvas?: boolean;
  watchMobileCanvasMove?: boolean;
  maxDistance?: {
    x: number;
    y: number;
  };
}

let {
  className = "",
  reverse = false,
  watchEmptyCanvas = false,
  watchMobileCanvasMove = true,
  maxDistance = { x: 35, y: 70 },
} = Astro.props;

const options = {
  maxDistance,
  reverse,
  watchEmptyCanvas,
  watchMobileCanvasMove,
};
---

<svg
  xmlns="http://www.w3.org/2000/svg"
  class={`eyes ${className}`}
  x-data={`Eyes(${JSON.stringify(options)})`}
  x-bind="eyes"
  viewBox="0 0 700 700"
>
  <ellipse cx="203.5" cy="379.5" rx="148" ry="293.5" class="left-eye-shadow"
  ></ellipse>
  <ellipse cx="531.5" cy="379.5" rx="148" ry="293.5" class="right-eye-shadow"
  ></ellipse>
  <path
    class="stroke-black l-eye-outline"
    d="M181.5,84c15.15,0,30.21,6.19,44.76,18.39,15.31,12.84,29.85,32.41,42.04,56.58,12.82,25.42,22.92,55.19,30.02,88.46,7.43,34.82,11.19,71.85,11.19,110.07s-3.77,75.26-11.19,110.07c-7.1,33.27-17.2,63.04-30.02,88.46-12.19,24.17-26.73,43.74-42.04,56.58-14.55,12.2-29.6,18.39-44.76,18.39s-30.21-6.19-44.76-18.39c-15.31-12.84-29.85-32.41-42.04-56.58-12.82-25.42-22.92-55.19-30.02-88.46-7.43-34.82-11.19-71.85-11.19-110.07s3.77-75.26,11.19-110.07c7.1-33.27,17.2-63.04,30.02-88.46,12.19-24.17,26.73-43.74,42.04-56.58,14.55-12.2,29.6-18.39,44.76-18.39M181.5,64c-81.74,0-148,131.4-148,293.5s66.26,293.5,148,293.5,148-131.4,148-293.5S263.24,64,181.5,64h0Z"
  ></path>
  <path
    class="stroke-black right-eye-outline"
    d="M509.5,84c15.15,0,30.21,6.19,44.76,18.39,15.31,12.84,29.85,32.41,42.04,56.58,12.82,25.42,22.92,55.19,30.02,88.46,7.43,34.82,11.19,71.85,11.19,110.07s-3.77,75.26-11.19,110.07c-7.1,33.27-17.2,63.04-30.02,88.46-12.19,24.17-26.73,43.74-42.04,56.58-14.55,12.2-29.6,18.39-44.76,18.39s-30.21-6.19-44.76-18.39c-15.31-12.84-29.85-32.41-42.04-56.58-12.82-25.42-22.92-55.19-30.02-88.46-7.43-34.82-11.19-71.85-11.19-110.07s3.77-75.26,11.19-110.07c7.1-33.27,17.2-63.04,30.02-88.46,12.19-24.17,26.73-43.74,42.04-56.58,14.55-12.2,29.6-18.39,44.76-18.39M509.5,64c-81.74,0-148,131.4-148,293.5s66.26,293.5,148,293.5,148-131.4,148-293.5-66.26-293.5-148-293.5h0Z"
  ></path>
  <path
    class="fill-current left-sclera"
    d="M181.5,641c-35.56,0-69.56-28.58-95.72-80.47-27.26-54.07-42.28-126.17-42.28-203.03s15.01-148.97,42.28-203.03c26.17-51.89,60.16-80.47,95.72-80.47s69.56,28.58,95.72,80.47c27.26,54.06,42.28,126.17,42.28,203.03s-15.01,148.97-42.28,203.03c-26.17,51.89-60.16,80.47-95.72,80.47Z"
  ></path>
  <path
    class="fill-current right-sclera"
    d="M509.5,641c-35.56,0-69.56-28.58-95.72-80.47-27.26-54.07-42.28-126.17-42.28-203.03s15.01-148.97,42.28-203.03c26.17-51.89,60.16-80.47,95.72-80.47s69.56,28.58,95.72,80.47c27.26,54.06,42.28,126.17,42.28,203.03s-15.01,148.97-42.28,203.03c-26.17,51.89-60.16,80.47-95.72,80.47Z"
  ></path>
  <ellipse
    class="left-pupil"
    x-bind="eye"
    x-data={`Eye({mobilePosition: {x: 0, y: 0.6}})`}
    cx="181.5"
    cy="357.5"
    rx="52.2"
    ry="141"></ellipse>
  <ellipse
    class="right-pupil"
    x-bind="eye"
    x-data={`Eye({mobilePosition: {x: 0, y: 0.6}})`}
    cx="509.5"
    cy="357.5"
    rx="52.2"
    ry="141"></ellipse>
  <path
    class="left-pupil-x"
    d="M186.83,357.5l31.35-84.92c.21-.57.31-1.16.31-1.73,0-2.03-1.25-3.94-3.27-4.69-2.59-.96-5.47.37-6.42,2.96l-27.3,73.94-27.3-73.94c-.96-2.59-3.83-3.92-6.42-2.96-2.02.75-3.27,2.66-3.27,4.69,0,.58.1,1.16.31,1.73l31.35,84.92-31.35,84.92c-.21.57-.31,1.16-.31,1.73,0,2.03,1.25,3.94,3.27,4.69.57.21,1.16.31,1.73.31,2.03,0,3.95-1.25,4.69-3.27l27.3-73.94,27.3,73.94c.75,2.02,2.66,3.27,4.69,3.27.58,0,1.16-.1,1.73-.31,2.02-.75,3.27-2.66,3.27-4.69,0-.58-.1-1.16-.31-1.73l-31.35-84.92Z"
  ></path>
  <path
    class="right-pupil-x"
    d="M514.83,357.5l31.35-84.92c.21-.57.31-1.16.31-1.73,0-2.03-1.25-3.94-3.27-4.69-2.59-.96-5.47.37-6.42,2.96l-27.3,73.94-27.3-73.94c-.96-2.59-3.83-3.92-6.42-2.96-2.02.75-3.27,2.66-3.27,4.69,0,.58.1,1.16.31,1.73l31.35,84.92-31.35,84.92c-.21.57-.31,1.16-.31,1.73,0,2.03,1.25,3.94,3.27,4.69.57.21,1.16.31,1.73.31,2.03,0,3.95-1.25,4.69-3.27l27.3-73.94,27.3,73.94c.75,2.02,2.66,3.27,4.69,3.27.58,0,1.16-.1,1.73-.31,2.02-.75,3.27-2.66,3.27-4.69,0-.58-.1-1.16-.31-1.73l-31.35-84.92Z"
  ></path>
  <path
    class="cancel-stroke fill-none stroke-black"
    stroke-linecap="round"
    stroke-linejoin="round"
    stroke-width="20"
    d="M680.72 385.85L34.22 409.61L683.69 359.12L16.4 362.09L692.6 309.62L25.31 309.62L674.78 271.01L166.22 421.21L613.4 385.85L146.1 327.44L520.83 340.87L31.25 327.44L674.78 412.58L25.31 256.16L686.66 485.84"
  ></path>
</svg>

<script>
  import Alpine from "alpinejs";

  document.addEventListener("alpine:init", () => {
    Alpine.data(
      "Eyes",
      ({ maxDistance, reverse, watchMobileCanvasMove, watchEmptyCanvas }) => ({
        reverse,
        maxDistance,
        watchMobileCanvasMove,
        watchEmptyCanvas,
        cursorPosition: null,
        handleMove(x, y) {
          const dimensions = {
            width: document.documentElement.clientWidth,
            height: document.documentElement.clientHeight,
          };
          return {
            x: x / dimensions.width,
            y: y / dimensions.height,
          };
        },
        eyes: {
          ["@empty-canvas.camel.window"]() {
            if (this.watchEmptyCanvas) {
              this.$el.classList.add("eyes--empty");
            }
          },
          ["@mobile-canvas-move.camel.window.throttle.16ms"]({ detail }) {
            if (this.watchMobileCanvasMove) {
              this.$data.cursorPosition = this.handleMove(detail.x, detail.y);
            }
          },
          ["@mousemove.window.throttle.16ms.passive"](e) {
            this.$data.cursorPosition = this.handleMove(e.clientX, e.clientY);
          },
        },
      })
    );

    Alpine.data("Eye", ({ mobilePosition }) => ({
      original: null,
      vector: null,
      init() {
        this.original = {
          cx: parseFloat(this.$el.getAttribute("cx")),
          cy: parseFloat(this.$el.getAttribute("cy")),
        };
        this.vector = this.original;

        const isMobile = document.documentElement.clientWidth <= 767;

        const positionByPercentage = (cx, cy, radius, px, py) => {
          const newX = cx + radius * Math.cos(px * Math.PI);
          const newY = cy - radius * Math.cos(py * Math.PI);
          return { cx: newX, cy: newY };
        };

        if (isMobile) {
          this.$data.vector = positionByPercentage(
            this.original.cx,
            this.original.cy,
            this.$data.maxDistance.x,
            mobilePosition.x,
            mobilePosition.y
          );
        }

        this.$watch("cursorPosition", (value) => {
          this.$data.vector = positionByPercentage(
            this.original.cx,
            this.original.cy,
            this.$data.maxDistance.y,
            this.reverse ? value.x : 1 - value.x,
            this.reverse ? 1 - value.y : value.y
          );
        });
      },
      eye: {
        [":cx"]() {
          return this.$data.vector.cx;
        },
        [":cy"]() {
          return this.$data.vector.cy;
        },
      },
    }));
  });
</script>
