---
interface Props {
  className?: string;
}

let { className = "" } = Astro.props;
---

<svg
  xmlns="http://www.w3.org/2000/svg"
  class={`w-5 h-5 lg:w-8 lg:h-8 relative mb-[1px] ${className}`}
  x-data="Eyes"
  viewBox="0 0 700 700"
>
  <path
    d="M181.5,84c15.15,0,30.21,6.19,44.76,18.39,15.31,12.84,29.85,32.41,42.04,56.58,12.82,25.42,22.92,55.19,30.02,88.46,7.43,34.82,11.19,71.85,11.19,110.07s-3.77,75.26-11.19,110.07c-7.1,33.27-17.2,63.04-30.02,88.46-12.19,24.17-26.73,43.74-42.04,56.58-14.55,12.2-29.6,18.39-44.76,18.39s-30.21-6.19-44.76-18.39c-15.31-12.84-29.85-32.41-42.04-56.58-12.82-25.42-22.92-55.19-30.02-88.46-7.43-34.82-11.19-71.85-11.19-110.07s3.77-75.26,11.19-110.07c7.1-33.27,17.2-63.04,30.02-88.46,12.19-24.17,26.73-43.74,42.04-56.58,14.55-12.2,29.6-18.39,44.76-18.39M181.5,64c-81.74,0-148,131.4-148,293.5s66.26,293.5,148,293.5,148-131.4,148-293.5S263.24,64,181.5,64h0Z"
  ></path>
  <path
    d="M509.5,84c15.15,0,30.21,6.19,44.76,18.39,15.31,12.84,29.85,32.41,42.04,56.58,12.82,25.42,22.92,55.19,30.02,88.46,7.43,34.82,11.19,71.85,11.19,110.07s-3.77,75.26-11.19,110.07c-7.1,33.27-17.2,63.04-30.02,88.46-12.19,24.17-26.73,43.74-42.04,56.58-14.55,12.2-29.6,18.39-44.76,18.39s-30.21-6.19-44.76-18.39c-15.31-12.84-29.85-32.41-42.04-56.58-12.82-25.42-22.92-55.19-30.02-88.46-7.43-34.82-11.19-71.85-11.19-110.07s3.77-75.26,11.19-110.07c7.1-33.27,17.2-63.04,30.02-88.46,12.19-24.17,26.73-43.74,42.04-56.58,14.55-12.2,29.6-18.39,44.76-18.39M509.5,64c-81.74,0-148,131.4-148,293.5s66.26,293.5,148,293.5,148-131.4,148-293.5-66.26-293.5-148-293.5h0Z"
  ></path>
  <ellipse
    x-bind="eye"
    x-data="Eye({mobilePosition: {x: 0, y: 0.6}})"
    cx="181.5"
    cy="357.5"
    rx="52.2"
    ry="141"></ellipse>
  <ellipse
    x-bind="eye"
    x-data="Eye({mobilePosition: {x: 0, y: 0.6}})"
    cx="509.5"
    cy="357.5"
    rx="52.2"
    ry="141"></ellipse>
</svg>

<script>
  import Alpine from "alpinejs";
  import { throttle } from "throttle-debounce";

  document.addEventListener("alpine:init", () => {
    Alpine.data("Eyes", (maxDistance = 50) => ({
      cursorPosition: null,
      maxDistance,
      throttledListener: null,
      listener(e) {
        const dimensions = {
          width: document.documentElement.clientWidth,
          height: document.documentElement.clientHeight,
        };

        this.$data.cursorPosition = {
          x: e.clientX / dimensions.width,
          y: e.clientY / dimensions.height,
        };
      },
      init() {
        this.throttledListener = throttle(17, this.listener.bind(this));
        window.addEventListener("mousemove", this.throttledListener);
      },
      destroy() {
        window.removeEventListener("mousemove", this.throttledListener);
      },
    }));

    Alpine.data("Eye", ({ mobilePosition }) => ({
      original: null,
      vector: null,
      init() {
        this.original = {
          cx: parseFloat(this.$el.getAttribute("cx")),
          cy: parseFloat(this.$el.getAttribute("cy")),
        };
        this.vector = this.original;

        const isMobile = document.documentElement.clientWidth <= 767;

        const positionByPercentage = (cx, cy, radius, px, py) => {
          const newX = cx + radius * Math.cos(px * Math.PI);
          const newY = cy - radius * Math.cos(py * Math.PI);
          return { cx: newX, cy: newY };
        };
        if (isMobile) {
          this.$data.vector = positionByPercentage(
            this.original.cx,
            this.original.cy,
            this.$data.maxDistance,
            mobilePosition.x,
            mobilePosition.y
          );
        } else {
          this.$watch("cursorPosition", (value) => {
            this.$data.vector = positionByPercentage(
              this.original.cx,
              this.original.cy,
              this.$data.maxDistance,
              1 - value.x,
              value.y
            );
          });
        }
      },
      eye: {
        [":cx"]() {
          return this.$data.vector.cx;
        },
        [":cy"]() {
          return this.$data.vector.cy;
        },
      },
    }));
  });
</script>
