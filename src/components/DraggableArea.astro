---
const id = crypto.randomUUID();
---

<div class="draggable-wrapper" x-data={`DraggableArea("${id}")`} x-bind="area">
  <div class="draggable-area" x-resize.document="calculateHeight(draggables)">
    <slot />
  </div>
</div>

<style>
  .draggable-wrapper {
    @apply w-full h-full overflow-hidden flex items-center justify-center;
  }
  .draggable-area {
    @apply w-full max-w-sm h-full mx-auto relative;
  }
</style>

<script>
  import Alpine from "alpinejs";

  document.addEventListener("alpine:init", () => {
    Alpine.data("DraggableArea", (id) => ({
      draggables: {},
      draggableAreaID: id,
      height: 0,
      heightBuffer: 230,
      moving: false,
      resizing: false,
      screen: { x: -1, y: -1 },
      calculateHeight(draggables: {
        [T: string]: {
          z: number;
          id: string;
          selected: boolean;
          width: number;
          height: number;
          x: number;
          y: number;
        };
      }) {
        console.log("<DraggableArea> calculating size");

        const allDraggablesEl = this.$el.querySelectorAll(".draggable");
        let tallestHeight = 0;
        if (Object.keys(draggables).length === allDraggablesEl.length) {
          for (const $draggable of Object.values(draggables)) {
            if ($draggable.height && $draggable.y && $draggable.id) {
              const lowerBound = $draggable.height + $draggable.y;
              console.log($draggable.id, lowerBound);
              if (tallestHeight < lowerBound) {
                tallestHeight = lowerBound;
              }
            }
          }
          if (this.height < tallestHeight + this.heightBuffer) {
            console.log("!!! change tallest:", tallestHeight);
            this.height = tallestHeight + this.heightBuffer;
            this.$dispatch("viewportScreenChangeHeight", this.height);
          }
        }
      },
      init() {
        this.$watch("resizing", (isResizing) => {
          if (isResizing === false && this.moving === false) {
            console.log(34);
            this.$dispatch("cursorChange", {
              className: { remove: ["cursor--hidden"] },
            });
          }
        });
        this.$watch("draggables", (draggables) => {
          this.calculateHeight(draggables);
        });
      },
      endMove() {
        this.moving = false;
        this.resizing = false;
        this.screen = { x: -1, y: -1 };

        // this.showOverflow from <Layout />
        // @ts-ignore
        if (this.showOverflow === false) {
          this.$dispatch("showOverflow");
        }
      },
      area: {
        ["@pointerdown.self"]() {
          console.log("DraggableArea @pointerdown");
          this.$dispatch("draggable.cancel", { areaID: this.draggableAreaID });
        },
        ["@touchstart"]() {
          console.log("DraggableArea @touchstart");
          this.$dispatch("draggable.cancel", { areaID: this.draggableAreaID });
        },
        ["@pointerup.debounce.32ms.passive"]() {
          console.log("DraggableArea @pointerup");
          this.endMove();
        },
        ["@pointerleave.debounce.32ms.passive"]() {
          console.log("DraggableArea @pointerleave");
          this.endMove();
        },
        ["@touchend.debounce.32ms.passive"]() {
          console.log("DraggableArea @touchend");
          this.endMove();
        },
        ["@touchcancel.debounce.32ms.passive"]() {
          console.log("DraggableArea @touchcancel");
          this.endMove();
        },
        ["@touchmove.passive.throttle.16ms"](event: TouchEvent) {
          if (this.moving) {
            console.log("DraggableArea @touchmove moving");
            this.screen = {
              x: event.touches[0]!.clientX,
              y: event.touches[0]!.clientY,
            };
          }
        },
        ["@mousemove.passive"](event: PointerEvent) {
          if (this.moving) {
            console.log("DraggableArea @mousemove moving");
            this.screen = {
              x: event.screenX,
              y: event.screenY,
            };
          }
        },
        [":style"]() {
          return {
            height: this.height ? `${this.height}px` : false,
          };
        },
      },
    }));
  });
</script>
