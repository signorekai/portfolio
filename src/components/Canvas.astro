---
interface Props {
  className?: string;
  portfolio: Array<object>;
}

let { className, portfolio } = Astro.props;
---

<div
  class={`w-full h-full relative canvas ${className}`}
  x-data="Canvas"
  x-bind:class="isMoving && 'canvas--moving'"
>
  <div class="w-full h-full relative overflow-hidden" x-ref="container">
    <div
      class="w-full h-full absolute flex"
      x-bind="background"
      x-ref="background"
    >
    </div>
    <template x-for="item in items">
      <div
        class="project-block"
        x-data="Block(item)"
        :style="{'aspectRatio': `${item.width} / ${item.height}`}"
        x-bind="block"
        x-transition
      >
        <div class="relative" x-bind="mediaWrapper">
          <template x-if="item.mediaType === 'video/mp4'">
            <video
              autoplay
              muted
              loop
              playsinline
              class="w-full h-full"
              :class="item.customClass"
              :src="`/assets/${item.media}`"
            >
              <source :src="`/assets/${item.media}`" :type="item.mediaType" />
            </video>
          </template>
          <template x-if="item.mediaType.startsWith('image')">
            <img
              :class="item.customClass"
              :width="item.width"
              :height="item.height"
              :src="`/assets/${item.media}`"
              :alt="item.description"
            />
          </template>
        </div>
      </div>
    </template>
    <div
      x-data="Meta()"
      x-bind="meta"
      x-cloak
      x-show="show"
      x-transition:enter="transition ease-out duration-300"
      x-transition:enter-start="opacity-0 translate-y-10"
      x-transition:enter-end="opacity-100 translate-y-0"
      x-transition:leave="transition ease-out duration-300"
      x-transition:leave-start="opacity-100 translate-y-0"
      x-transition:leave-end="opacity-0 translate-y-10"
      class="project-meta project-meta--full flex flex-row left-0 bottom-0 p-4 pt-3 bg-peach-light"
    >
      <div class="flex-1">
        <template x-if="link">
          <h2 class="project-meta--header">
            <a
              x-bind:href="link"
              class="group hover:pl-2 transition-all duration-150"
            >
              <span x-text="title"></span>
              <svg
                xmlns="http://www.w3.org/2000/svg"
                class="w-4 h-4 scale-y-125 inline-block mb-1 rotate-45 group-hover:rotate-90 transition-transform duration-200 ease-in-out"
                viewBox="0 0 700 700"
              >
                <path
                  class="fill-current"
                  d="M350,641.2c-13.81,0-25-11.19-25-25V132.49l-235.13,161.8c-11.38,7.83-26.94,4.95-34.77-6.42-7.83-11.37-4.95-26.94,6.42-34.77L349.64,54.85l288.84,198.75c11.37,7.83,14.25,23.39,6.42,34.77-7.83,11.37-23.39,14.25-34.77,6.42l-235.13-161.8v483.2c0,13.81-11.19,25-25,25Z"
                ></path>
              </svg>
              <button
                class="hidden lg:inline-flex link-button mb-1 group-hover:shadow-link-box group-hover:translate-x-1 group-hover:-translate-y-1 group-hover:bg-peach"
              >
                <span class="text-xs leading-none">View project</span>
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  class="w-4 h-4 inline-block mb-1 rotate-45 group-hover:rotate-90 transition-transform duration-200 ease-in-out"
                  viewBox="0 0 700 700"
                >
                  <path
                    class="fill-current"
                    d="M350,641.2c-13.81,0-25-11.19-25-25V132.49l-235.13,161.8c-11.38,7.83-26.94,4.95-34.77-6.42-7.83-11.37-4.95-26.94,6.42-34.77L349.64,54.85l288.84,198.75c11.37,7.83,14.25,23.39,6.42,34.77-7.83,11.37-23.39,14.25-34.77,6.42l-235.13-161.8v483.2c0,13.81-11.19,25-25,25Z"
                  ></path>
                </svg>
              </button>
            </a>
          </h2>
        </template>
        <template x-if="link.length === 0">
          <h2 class="project-meta--header">
            <span x-text="title"></span>
          </h2>
        </template>
        <p
          class="font-platform font-light text-xl leading-5"
          x-html="description"
        >
        </p>
      </div>
    </div>
  </div>
</div>

<script define:vars={{ portfolio }}>
  const getRandomInt = (min, max) => {
    min = Math.ceil(min);
    max = Math.floor(max);
    return Math.floor(Math.random() * (max - min + 1)) + min;
  };
  document.addEventListener("alpine:init", () => {
    Alpine.store("activeElement", false);
    Alpine.store("activeItem", false);

    Alpine.data("Meta", () => ({
      show: false,
      title: "",
      description: "",
      link: "",
      timer: false,
      meta: {
        ["x-effect"]() {
          if (this.$store.activeItem) {
            if (this.title !== this.$store.activeItem.projectTitle) {
              this.show = false;
              const delay = this.title.length === 0 ? 0 : 350;

              clearTimeout(this.timer);
              this.timer = setTimeout(() => {
                this.title = this.$store.activeItem.projectTitle;

                if (this.$store.activeItem.shortProjectDescription) {
                  this.description =
                    this.$store.activeItem.shortProjectDescription;
                } else if (this.$store.activeItem.projectDescription) {
                  this.description = this.$store.activeItem.projectDescription;
                } else {
                  this.description = "";
                }

                this.link = this.$store.activeItem.projectLink || "";
                this.show = true;
              }, delay);
            }
          }
        },
        // ["@change-meta.window"](event) {
        //   console.log(75, event.detail);
        //   if (this.title.length === 0 || ) {
        //     this.title = event.detail.projectTitle;
        //     // this.description = event.detail.;
        //   }
        // },
      },
    }));

    Alpine.data("Canvas", () => ({
      items: [],
      initialised: false,
      isMoving: false,
      init() {
        setTimeout(() => {
          this.initialised = true;
        }, 2000);
      },
      onMove: function (event) {
        if (this.$store.activeElement) {
          const $block = Alpine.$data(this.$store.activeElement);
          if ($block.mode === "moving") {
            console.log("touches?", event.touches);
            let moving = {
              x: event.pageX - $block.clickX,
              y: event.pageY - $block.clickY,
            };

            if (typeof event.touches !== "undefined") {
              moving = {
                x: event.touches[0].pageX - $block.clickX,
                y: event.touches[0].pageY - $block.clickY,
              };
            }

            // console.log(
            //   "delta",
            //   moving.y - $block.previousCoordinates.y,
            //   moving.x - $block.previousCoordinates.x
            // );
            // $block.delta.y = moving.y - $block.previousCoordinates.y;
            // $block.delta.x = moving.x - $block.previousCoordinates.x;
            window.requestAnimationFrame(() => {
              $block.previousCoordinates = moving;
              $block.top = moving.y;
              $block.left = moving.x;
            });
          }
        }
      },
      background: {
        ["@click"](event) {
          if (this.initialised) {
            if (this.$store.activeElement) {
              Alpine.$data(this.$store.activeElement).mode = "view";
              this.$store.activeElement = false;
              this.$store.activeItem = false;
            }

            const zIndexes = this.items.map((item) => item.zIndex);
            const highestZIndex =
              zIndexes.length > 0 ? Math.max(...zIndexes) : 10;

            if (portfolio.length > 0) {
              const selectedIndex = getRandomInt(0, portfolio.length - 1);
              const item = {
                ...portfolio[selectedIndex],
                index: this.$data.items.length,
                top: event.offsetY,
                left: event.offsetX,
                zIndex: highestZIndex,
              };
              portfolio.splice(selectedIndex, 1);

              this.$data.items.push(item);

              if (
                !!this.$store.activeItem === false ||
                this.$store.activeItem.projectslug !== this.item.projectSlug
              ) {
                this.$store.activeItem = this.item;
              }
            }
          }
        },
        ["@touchmove.window.throttle.17ms"](event) {
          if (this.$store.activeElement) {
            console.log(97, event.pageX, event.pageY, event);
          }
          this.onMove(event);
        },
        ["@mousemove.window.throttle.17ms.passive"](event) {
          this.onMove(event);
        },
      },
    }));

    Alpine.data("Block", (item) => ({
      item,
      mode: "selected",
      clickX: 0,
      clickY: 0,
      showControls: false,
      moving: false,
      zIndex: 10,
      previousCoordinates: {
        x: 0,
        y: 0,
      },
      delta: {
        x: 0,
        y: 0,
      },
      ...item,
      init() {
        if (this.$store.activeElement) {
          Alpine.$data(this.$store.activeElement).mode = "view";
        }

        setTimeout(() => {
          this.$el.classList.add("block--visible");
          this.$store.activeElement = this.$el;
          this.$store.activeItem = this.item;
        }, 20);
      },
      onSelect(event) {
        if (this.$store.activeElement) {
          Alpine.$data(this.$store.activeElement).mode = "view";
        }

        this.$dispatch("change-meta", this.item);

        if (
          !!this.$store.activeItem === false ||
          this.$store.activeItem.projectSlug !== this.item.projectSlug
        ) {
          this.$store.activeItem = this.item;
        }

        if (this.mode !== "moving") {
          this.clickX = event.offsetX - this.$el.offsetWidth / 2;
          this.clickY = event.offsetY - this.$el.offsetHeight / 2;
          this.mode = "moving";

          if (document.body.clientWidth < 768) {
            this.clickX = this.clickX * 0.4;
            this.clickY = this.clickY * 0.4;
          }

          const zIndexes = this.items.map((item) => item.zIndex);
          const highestZIndex = Math.max(...zIndexes);

          if (
            (this.$store.activeElement &&
              this.$store.activeElement !== this.$el) ||
            this.items[this.index].zIndex <= highestZIndex
          ) {
            this.items[this.index].zIndex = highestZIndex + 1;
            this.zIndex = highestZIndex + 1;
          }
          this.$store.activeElement = this.$el;
          // const itemToBeAppended = { ...this.item };
          // console.log(98, this.items.indexOf(this.item));
          // this.items.splice(this.items.indexOf(this.item), 1);
          // itemToBeAppended.clickX = event.offsetX - this.$el.offsetWidth / 2;
          // itemToBeAppended.clickY = event.offsetY - this.$el.offsetHeight / 2;
          // itemToBeAppended.mode = "moving";
          // console.log(103, itemToBeAppended);
          // this.items.push(itemToBeAppended);
        }
      },
      mediaWrapper: {
        [":style"]() {
          let ratio = 1;

          if (this.$data.item.maxWidth !== "fit-content") {
            ratio =
              parseInt(this.$data.item.maxWidth) /
              parseInt(this.$data.item.width);
          } else if (this.$data.item.maxHeight !== "fit-content") {
            ratio =
              parseInt(this.$data.item.maxHeight) /
              parseInt(this.$data.item.height);
          }

          return {
            aspectRatio: `${this.$data.item.width} / ${this.$data.item.height}`,
            width: `${this.$data.item.width * ratio}px`,
            height: `${this.$data.item.height * ratio}px`,
          };
        },
      },
      block: {
        [":style"]() {
          return {
            "--top": `${this.$data.top}px`,
            "--left": `${this.$data.left}px`,
            "z-index": this.$data.zIndex,
            "--tw-translate-x": "-50%",
            "--tw-translate-y": "-50%",
            transform:
              "translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y))",
            padding: `${this.$data.item.padding}px`,
            ...this.$data.blockStyle,
          };
        },
        [":class"]() {
          return {
            "block--selected": this.mode === "selected",
            "block--moving": this.mode === "moving",
          };
        },
        ["@pointerdown.self"](event) {
          console.log(202);
          this.isMoving = true;
          this.onSelect(event);
        },
        ["@pointerup"]() {
          if (this.mode === "moving") {
            this.isMoving = false;
            this.mode = "selected";
          }
        },
        ["@touchend"]() {
          if (this.mode === "moving") {
            this.isMoving = false;
            this.mode = "selected";
          }
        },
      },
    }));
  });
</script>
