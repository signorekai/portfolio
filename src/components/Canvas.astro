---
interface Props {
  className?: string;
  portfolio: Array<object>;
}

let { className, portfolio } = Astro.props;
---

<div class={`w-full h-full relative canvas ${className}`} x-data="Canvas">
  <div class="w-full h-full relative" x-ref="container" x-ref="container">
    <div class="w-full h-full absolute" x-bind="background" x-ref="background">
    </div>
    <template x-for="item in items">
      <div
        class="project-block"
        x-data="Block(item)"
        x-bind="block"
        x-transition
      >
        <template x-if="item.mediaType === 'video/mp4'">
          <video
            autoplay
            muted
            loop
            playsinline
            :class="item.customClass"
            :style="{'aspectRatio': `${item.width} / ${item.height}`, 'width': item.maxWidth !== 'fit-content' ? item.maxWidth : 'auto', 'height': item.maxHeight !== 'fit-content' ? item.maxHeight : 'auto', 'maxWidth': item.maxWidth, 'maxHeight': item.maxHeight}"
            :src="`/assets/${item.media}`"
          >
            <source :src="`/assets/${item.media}`" :type="item.mediaType" />
          </video>
        </template>
        <template x-if="item.mediaType.startsWith('image')">
          <img
            :class="item.customClass"
            :style="{'aspectRatio': `${item.width} / ${item.height}`, 'maxWidth': item.maxWidth, 'maxHeight': item.maxHeight, 'width': item.maxWidth !== 'fit-content' ? item.maxWidth : 'auto', 'height': item.maxHeight !== 'fit-content' ? item.maxHeight : 'auto' }"
            :src="`/assets/${item.media}`"
            :alt="item.description"
          />
        </template>
        <p x-text="item.text"></p>
      </div>
    </template>
    <div
      x-data="Meta()"
      x-bind="meta"
      class="project-meta mix-blend-difference text-yellow"
      x-bind:class="link.length > 0 ? 'project-meta--has-link' : 'project-meta--no-link' "
      x-show="show"
      x-transition:enter="transition ease-out duration-300"
      x-transition:enter-start="opacity-0 translate-y-5"
      x-transition:enter-end="opacity-100 translate-y-0"
      x-transition:leave="transition ease-out duration-300"
      x-transition:leave-start="opacity-100 translate-y-0"
      x-transition:leave-end="opacity-0 translate-y-5"
    >
      <h2 class="pointer-events-none" x-text="title"></h2>
      <p
        class="pointer-events-none font-platform font-light text-xl leading-5"
        x-html="description"
      >
      </p>
    </div>
    <div
      x-data="Meta()"
      x-bind="meta"
      class="project-meta project-meta--button"
      x-show="show"
      x-transition:enter="transition ease-out duration-300"
      x-transition:enter-start="opacity-0 translate-y-5"
      x-transition:enter-end="opacity-100 translate-y-0"
      x-transition:leave="transition ease-out duration-300"
      x-transition:leave-start="opacity-100 translate-y-0"
      x-transition:leave-end="opacity-0 translate-y-5"
    >
      <template x-if="link">
        <a x-bind:href="link"><h6 class="link-button mb-1">View project</h6></a>
      </template>
    </div>
  </div>
</div>

<script define:vars={{ portfolio }}>
  const getRandomInt = (min, max) => {
    min = Math.ceil(min);
    max = Math.floor(max);
    return Math.floor(Math.random() * (max - min + 1)) + min;
  };
  document.addEventListener("alpine:init", () => {
    Alpine.store("activeElement", false);
    Alpine.store("activeItem", false);

    Alpine.data("Meta", () => ({
      show: false,
      title: "",
      description: "",
      link: "",
      timer: false,
      meta: {
        ["x-effect"]() {
          if (this.$store.activeItem) {
            if (this.title !== this.$store.activeItem.projectTitle) {
              this.show = false;
              const delay = this.title.length === 0 ? 0 : 350;
              console.log(83, delay);

              clearTimeout(this.timer);
              this.timer = setTimeout(() => {
                this.title = this.$store.activeItem.projectTitle;

                if (this.$store.activeItem.shortProjectDescription) {
                  this.description =
                    this.$store.activeItem.shortProjectDescription;
                } else if (this.$store.activeItem.projectDescription) {
                  this.description = this.$store.activeItem.projectDescription;
                } else {
                  this.description = "";
                }

                this.link = this.$store.activeItem.projectLink || "";
                this.show = true;
              }, delay);
            }
          }
        },
        // ["@change-meta.window"](event) {
        //   console.log(75, event.detail);
        //   if (this.title.length === 0 || ) {
        //     this.title = event.detail.projectTitle;
        //     // this.description = event.detail.;
        //   }
        // },
      },
    }));

    Alpine.data("Canvas", () => ({
      items: [],
      initialised: false,
      init() {
        setTimeout(() => {
          this.initialised = true;
        }, 2000);
      },
      onMove: function (event) {
        if (this.$store.activeElement) {
          const $block = Alpine.$data(this.$store.activeElement);
          if ($block.mode === "moving") {
            console.log("touches?", event.touches);
            let moving = {
              x: event.pageX - $block.clickX,
              y: event.pageY - $block.clickY,
            };

            if (typeof event.touches !== "undefined") {
              moving = {
                x: event.touches[0].pageX - $block.clickX,
                y: event.touches[0].pageY - $block.clickY,
              };
            }

            // console.log(
            //   "delta",
            //   moving.y - $block.previousCoordinates.y,
            //   moving.x - $block.previousCoordinates.x
            // );
            // $block.delta.y = moving.y - $block.previousCoordinates.y;
            // $block.delta.x = moving.x - $block.previousCoordinates.x;
            window.requestAnimationFrame(() => {
              $block.previousCoordinates = moving;
              $block.top = moving.y;
              $block.left = moving.x;
            });
          }
        }
      },
      background: {
        ["@click"](event) {
          if (this.initialised) {
            if (this.$store.activeElement) {
              Alpine.$data(this.$store.activeElement).mode = "view";
              this.$store.activeElement = false;
              this.$store.activeItem = false;
            }

            const zIndexes = this.items.map((item) => item.zIndex);
            const highestZIndex =
              zIndexes.length > 0 ? Math.max(...zIndexes) : 10;

            if (portfolio.length > 0) {
              const selectedIndex = getRandomInt(0, portfolio.length - 1);
              const item = {
                ...portfolio[selectedIndex],
                index: this.$data.items.length,
                top: event.offsetY,
                left: event.offsetX,
                zIndex: highestZIndex,
              };
              portfolio.splice(selectedIndex, 1);

              this.$data.items.push(item);

              if (
                !!this.$store.activeItem === false ||
                this.$store.activeItem.projectslug !== this.item.projectSlug
              ) {
                this.$store.activeItem = this.item;
              }
            }
          }
        },
        ["@touchmove.window.throttle.17ms"](event) {
          if (this.$store.activeElement) {
            console.log(97, event.pageX, event.pageY, event);
          }
          this.onMove(event);
        },
        ["@mousemove.window.throttle.17ms.passive"](event) {
          this.onMove(event);
        },
      },
    }));

    Alpine.data("Block", (item) => ({
      item,
      mode: "selected",
      clickX: 0,
      clickY: 0,
      showControls: false,
      moving: false,
      zIndex: 10,
      previousCoordinates: {
        x: 0,
        y: 0,
      },
      delta: {
        x: 0,
        y: 0,
      },
      ...item,
      init() {
        if (this.$store.activeElement) {
          Alpine.$data(this.$store.activeElement).mode = "view";
        }

        setTimeout(() => {
          this.$el.classList.add("block--visible");
          this.$store.activeElement = this.$el;
          this.$store.activeItem = this.item;
        }, 20);
      },
      onSelect(event) {
        if (this.$store.activeElement) {
          Alpine.$data(this.$store.activeElement).mode = "view";
        }

        this.$dispatch("change-meta", this.item);

        if (
          !!this.$store.activeItem === false ||
          this.$store.activeItem.projectSlug !== this.item.projectSlug
        ) {
          this.$store.activeItem = this.item;
        }

        if (this.mode !== "moving") {
          this.clickX = event.offsetX - this.$el.offsetWidth / 2;
          this.clickY = event.offsetY - this.$el.offsetHeight / 2;
          this.mode = "moving";

          const zIndexes = this.items.map((item) => item.zIndex);
          const highestZIndex = Math.max(...zIndexes);

          if (
            this.$store.activeElement &&
            this.$store.activeElement !== this.$el
          ) {
            this.items[this.index].zIndex = highestZIndex + 1;
            this.zIndex = highestZIndex + 1;
          }
          this.$store.activeElement = this.$el;
          // const itemToBeAppended = { ...this.item };
          // console.log(98, this.items.indexOf(this.item));
          // this.items.splice(this.items.indexOf(this.item), 1);
          // itemToBeAppended.clickX = event.offsetX - this.$el.offsetWidth / 2;
          // itemToBeAppended.clickY = event.offsetY - this.$el.offsetHeight / 2;
          // itemToBeAppended.mode = "moving";
          // console.log(103, itemToBeAppended);
          // this.items.push(itemToBeAppended);
        }
      },
      block: {
        [":style"]() {
          return {
            "--top": `${this.$data.top}px`,
            "--left": `${this.$data.left}px`,
            "z-index": this.$data.zIndex,
            padding: `${this.$data.item.padding}px`,
            ...this.$data.blockStyle,
          };
        },
        [":class"]() {
          return {
            "block--selected": this.mode === "selected",
            "block--moving": this.mode === "moving",
          };
        },
        ["@pointerdown.self"](event) {
          console.log(202);
          this.onSelect(event);
        },
        ["@pointerup"]() {
          if (this.mode === "moving") {
            this.mode = "selected";
          }
        },
        ["@touchend"]() {
          if (this.mode === "moving") {
            this.mode = "selected";
          }
        },
      },
    }));
  });
</script>
